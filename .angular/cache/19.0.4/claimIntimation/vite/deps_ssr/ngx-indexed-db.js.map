{
  "version": 3,
  "sources": ["../../../../../../node_modules/tslib/tslib.es6.mjs", "../../../../../../node_modules/ngx-indexed-db/fesm2022/ngx-indexed-db.mjs"],
  "sourcesContent": ["/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n  };\n  return extendStatics(d, b);\n};\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nexport var __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nexport function __param(paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n}\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n}\n;\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n}\n;\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n}\n;\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", {\n    configurable: true,\n    value: prefix ? \"\".concat(prefix, \" \", name) : name\n  });\n}\n;\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\nexport function __generator(thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\nexport var __createBinding = Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n};\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n}\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []),\n    i,\n    q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i;\n  function awaitReturn(f) {\n    return function (v) {\n      return Promise.resolve(v).then(f, reject);\n    };\n  }\n  function verb(n, f) {\n    if (g[n]) {\n      i[n] = function (v) {\n        return new Promise(function (a, b) {\n          q.push([n, v, a, b]) > 1 || resume(n, v);\n        });\n      };\n      if (f) i[n] = f(i[n]);\n    }\n  }\n  function resume(n, v) {\n    try {\n      step(g[n](v));\n    } catch (e) {\n      settle(q[0][3], e);\n    }\n  }\n  function step(r) {\n    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n  }\n  function fulfill(value) {\n    resume(\"next\", value);\n  }\n  function reject(value) {\n    resume(\"throw\", value);\n  }\n  function settle(f, v) {\n    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n  }\n}\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) {\n    throw e;\n  }), verb(\"return\"), i[Symbol.iterator] = function () {\n    return this;\n  }, i;\n  function verb(n, f) {\n    i[n] = o[n] ? function (v) {\n      return (p = !p) ? {\n        value: __await(o[n](v)),\n        done: false\n      } : f ? f(v) : v;\n    } : f;\n  }\n}\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n    i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n}\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, \"raw\", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n  return cooked;\n}\n;\nvar __setModuleDefault = Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n};\nvar ownKeys = function (o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\nexport function __importDefault(mod) {\n  return mod && mod.__esModule ? mod : {\n    default: mod\n  };\n}\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || typeof receiver !== \"object\" && typeof receiver !== \"function\") throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function () {\n      try {\n        inner.call(this);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    };\n    env.stack.push({\n      value: value,\n      dispose: dispose,\n      async: async\n    });\n  } else if (async) {\n    env.stack.push({\n      async: true\n    });\n  }\n  return value;\n}\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r,\n    s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function (e) {\n            fail(e);\n            return next();\n          });\n        } else s |= 1;\n      } catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n    return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n      return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : d + ext + \".\" + cm.toLowerCase() + \"js\";\n    });\n  }\n  return path;\n}\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension\n};", "import * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Injectable, Inject, assertInInjectionContext, inject, PLATFORM_ID, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { __decorate } from 'tslib';\nimport { Observable, from, combineLatest } from 'rxjs';\nimport { finalize, take } from 'rxjs/operators';\nimport { isPlatformBrowser, DOCUMENT } from '@angular/common';\nvar DBMode;\n(function (DBMode) {\n  DBMode[\"readonly\"] = \"readonly\";\n  DBMode[\"readwrite\"] = \"readwrite\";\n})(DBMode || (DBMode = {}));\nconst CONFIG_TOKEN = new InjectionToken(null);\nconst INDEXED_DB = new InjectionToken('Indexed DB');\n/**\n * Token used to inject the indexed db implementation on the server\n */\nconst SERVER_INDEXED_DB = new InjectionToken('Server Indexed DB');\nfunction validateStoreName(db, storeName) {\n  return db.objectStoreNames.contains(storeName);\n}\nfunction validateBeforeTransaction(db, storeName, reject) {\n  if (!db) {\n    reject('You need to use the openDatabase function to create a database before you query it!');\n    return; // Stop further execution\n  }\n  if (!validateStoreName(db, storeName)) {\n    reject(`objectStore does not exists: ${storeName}`);\n  }\n}\nfunction createTransaction(db, options) {\n  const trans = db.transaction(options.storeName, options.dbMode);\n  trans.onerror = options.error;\n  trans.onabort = options.abort;\n  return trans;\n}\nfunction optionsGenerator(type, storeName, reject,\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nresolve) {\n  return {\n    storeName,\n    dbMode: type,\n    error: e => {\n      reject(e);\n    },\n    abort: e => {\n      reject(e);\n    }\n  };\n}\nconst openedDatabases = [];\nfunction openDatabase(indexedDB, dbName, version, upgradeCallback) {\n  return new Promise((resolve, reject) => {\n    if (!indexedDB) {\n      reject('IndexedDB not available');\n    }\n    const request = indexedDB.open(dbName, version);\n    let db;\n    request.onsuccess = () => {\n      db = request.result;\n      openedDatabases.push(db);\n      resolve(db);\n    };\n    request.onerror = () => {\n      reject(`IndexedDB error: ${request.error}`);\n    };\n    if (typeof upgradeCallback === 'function') {\n      request.onupgradeneeded = event => {\n        upgradeCallback(event, db);\n      };\n    }\n  });\n}\nasync function CreateObjectStore(indexedDB, dbName, version, storeSchemas, migrationFactory) {\n  return new Promise((resolve, reject) => {\n    if (!indexedDB) {\n      return;\n    }\n    const request = indexedDB.open(dbName, version);\n    request.onupgradeneeded = async event => {\n      const database = event.target.result;\n      const storeCreationPromises = storeSchemas.map(async storeSchema => {\n        if (!database.objectStoreNames.contains(storeSchema.store)) {\n          const objectStore = database.createObjectStore(storeSchema.store, storeSchema.storeConfig);\n          for (const schema of storeSchema.storeSchema) {\n            objectStore.createIndex(schema.name, schema.keypath, schema.options);\n          }\n        }\n      });\n      await Promise.all(storeCreationPromises);\n      const storeMigrations = migrationFactory && migrationFactory();\n      if (storeMigrations) {\n        const migrationKeys = Object.keys(storeMigrations).map(k => parseInt(k, 10)).filter(v => v > event.oldVersion).sort((a, b) => a - b);\n        for (const v of migrationKeys) {\n          storeMigrations[v](database, request.transaction);\n        }\n      }\n      database.close();\n      resolve();\n    };\n    request.onsuccess = e => {\n      e.target.result.close();\n      resolve();\n    };\n    request.onerror = error => {\n      reject(error);\n    };\n  });\n}\nfunction DeleteObjectStore(dbName, version, storeName) {\n  if (!dbName || !version || !storeName) {\n    throw Error('Params: \"dbName\", \"version\", \"storeName\" are mandatory.');\n  }\n  return new Observable(obs => {\n    try {\n      const newVersion = version + 1;\n      const request = indexedDB.open(dbName, newVersion);\n      request.onupgradeneeded = event => {\n        const database = event.target.result;\n        database.deleteObjectStore(storeName);\n        database.close();\n        console.log('onupgradeneeded');\n        obs.next();\n        obs.complete();\n      };\n      request.onerror = e => obs.error(e);\n    } catch (error) {\n      obs.error(error);\n    }\n  });\n}\nfunction closeDatabase(db) {\n  return new Promise((resolve, reject) => {\n    if (!db) {\n      reject(new Error('No database to close'));\n      return;\n    }\n    try {\n      db.close();\n      resolve();\n    } catch (error) {\n      reject(`Error closing database: ${error}`);\n    }\n  });\n}\nfunction CloseDbConnection() {\n  return function (_target, _propertyKey, descriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function (...args) {\n      const result = originalMethod.apply(this, args);\n      if (result instanceof Observable) {\n        return result.pipe(finalize(async () => {\n          const promises = openedDatabases.map(async db => {\n            await closeDatabase(db);\n          });\n          await Promise.all(promises);\n          openedDatabases.length = 0;\n        }));\n      }\n      return result;\n    };\n    return descriptor;\n  };\n}\nclass NgxIndexedDBService {\n  constructor(dbConfigs, indexedDB) {\n    this.dbConfigs = dbConfigs;\n    this.indexedDB = indexedDB;\n    this.defaultDatabaseName = null;\n    Object.values(this.dbConfigs).forEach((dbConfig, _, ref) => this.instanciateConfig(dbConfig, ref.length === 1));\n  }\n  async instanciateConfig(dbConfig, isOnlyConfig) {\n    if (!dbConfig.name) {\n      throw new Error('NgxIndexedDB: Please, provide the dbName in the configuration');\n    }\n    // if (!dbConfig.version) {\n    //   throw new Error('NgxIndexedDB: Please, provide the db version in the configuration');\n    // }\n    if ((dbConfig.isDefault ?? false) && this.defaultDatabaseName) {\n      // A default DB is already configured, throw an error\n      throw new Error('NgxIndexedDB: Only one database can be set as default');\n    }\n    if ((dbConfig.isDefault ?? false) && !this.defaultDatabaseName || isOnlyConfig) {\n      this.defaultDatabaseName = dbConfig.name;\n      this.selectedDb = dbConfig.name;\n    }\n    await CreateObjectStore(this.indexedDB, dbConfig.name, dbConfig.version, dbConfig.objectStoresMeta, dbConfig.migrationFactory);\n    openDatabase(this.indexedDB, dbConfig.name).then(db => {\n      if (db.version !== dbConfig.version) {\n        if (isDevMode()) {\n          console.warn(`\n            Your DB Config doesn't match the most recent version of the DB with name ${dbConfig.name}, please update it\n            DB current version: ${db.version};\n            Your configuration: ${dbConfig.version};\n            `);\n          console.warn(`Using latest version ${db.version}`);\n        }\n        this.dbConfigs[dbConfig.name].version = db.version;\n      }\n      db.close();\n    });\n  }\n  get dbConfig() {\n    return this.dbConfigs[this.selectedDb];\n  }\n  /**\n   * The function return the current version of database\n   *\n   * @Return the current version of database as number\n   */\n  getDatabaseVersion() {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        obs.next(db.version);\n        obs.complete();\n      }).catch(err => obs.error(`error during get version of database => ${err} `));\n    });\n  }\n  /**\n   * Selects a database for the current context.\n   * @param {string} [databaseName=undefined] Database name to select.\n   */\n  selectDb(databaseName) {\n    databaseName = databaseName ?? this.defaultDatabaseName;\n    if (!databaseName) {\n      // Name is still null, it means that there is no default database set\n      // and the database name was not specified while calling a method\n      throw new Error(`No database name specified and no default database set.`);\n    }\n    if (!Object.keys(this.dbConfigs).includes(databaseName)) {\n      throw new Error(`NgxIndexedDB: Database ${databaseName} is not initialized.`);\n    }\n    this.selectedDb = databaseName;\n  }\n  /**\n   * Allows to create a new object store ad-hoc\n   * @param storeName The name of the store to be created\n   * @param migrationFactory The migration factory if exists\n   */\n  async createObjectStore(storeSchema, migrationFactory) {\n    const storeSchemas = [storeSchema];\n    await CreateObjectStore(this.indexedDB, this.dbConfig.name, ++this.dbConfig.version, storeSchemas, migrationFactory);\n  }\n  /**\n   * Create dynamic store if not already without incrementing version\n   * For Dynamic store\n   * @param storeName The name of the store to create\n   */\n  async createDynamicObjectStore(storeSchema, migrationFactory) {\n    const storeSchemas = [storeSchema];\n    await CreateObjectStore(this.indexedDB, this.dbConfig.name, this.dbConfig.version, storeSchemas, migrationFactory);\n  }\n  /**\n   * Adds new entry in the store and returns its key\n   * @param storeName The name of the store to add the item\n   * @param value The entry to be added\n   * @param key The optional key for the entry\n   */\n  add(storeName, value, key) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, e => obs.error(e)));\n        const objectStore = transaction.objectStore(storeName);\n        const request = Boolean(key) ? objectStore.add(value, key) : objectStore.add(value);\n        request.onsuccess = async evt => {\n          const result = evt.target.result;\n          const getRequest = objectStore.get(result);\n          getRequest.onsuccess = event => {\n            obs.next(event.target.result);\n            obs.complete();\n          };\n          getRequest.onerror = event => {\n            obs.error(event);\n          };\n        };\n        request.onerror = event => {\n          obs.error(event);\n        };\n      }).catch(error => obs.error(error));\n    });\n  }\n  /**\n   * Adds new entries in the store and returns its key\n   * @param storeName The name of the store to add the item\n   * @param values The entries to be added containing optional key attribute\n   */\n  bulkAdd(storeName, values) {\n    const promises = new Promise((resolve, reject) => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, resolve, reject));\n        const objectStore = transaction.objectStore(storeName);\n        const results = values.map(value => {\n          return new Promise(resolve1 => {\n            const key = value.key;\n            delete value.key;\n            const request = Boolean(key) ? objectStore.add(value, key) : objectStore.add(value);\n            request.onsuccess = evt => {\n              const result = evt.target.result;\n              resolve1(result);\n            };\n          });\n        });\n        resolve(Promise.all(results));\n      }).catch(reason => reject(reason));\n    });\n    return from(promises);\n  }\n  /**\n   * Delete entries in the store and returns current entries in the store\n   * @param storeName The name of the store to add the item\n   * @param keys The keys to be deleted\n   */\n  bulkDelete(storeName, keys) {\n    const promises = keys.map(key => {\n      return new Promise((resolve, reject) => {\n        openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n          const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, reject, resolve));\n          const objectStore = transaction.objectStore(storeName);\n          objectStore.delete(key);\n          transaction.oncomplete = () => {\n            this.getAll(storeName).pipe(take(1)).subscribe(newValues => {\n              resolve(newValues);\n            });\n          };\n        }).catch(reason => reject(reason));\n      });\n    });\n    return from(Promise.all(promises));\n  }\n  /**\n   * Returns entry by key.\n   * @param storeName The name of the store to query\n   * @param key The entry key\n   */\n  getByKey(storeName, key) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, obs.error));\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.get(key);\n        request.onsuccess = event => {\n          obs.next(event.target.result);\n          obs.complete();\n        };\n        request.onerror = event => {\n          obs.error(event);\n        };\n      }).catch(error => obs.error(error));\n    });\n  }\n  /**\n   * Retrieve multiple entries in the store\n   * @param storeName The name of the store to retrieve the items\n   * @param keys The ids entries to be retrieve\n   */\n  bulkGet(storeName, keys) {\n    const observables = keys.map(key => this.getByKey(storeName, key));\n    return new Observable(obs => {\n      combineLatest(observables).subscribe(values => {\n        obs.next(values);\n        obs.complete();\n      });\n    });\n  }\n  /**\n   * Returns entry by id.\n   * @param storeName The name of the store to query\n   * @param id The entry id\n   */\n  getByID(storeName, id) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, obs.error, obs.next));\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.get(id);\n        request.onsuccess = event => {\n          obs.next(event.target.result);\n        };\n      }).catch(error => obs.error(error));\n    });\n  }\n  /**\n   * Returns entry by index.\n   * @param storeName The name of the store to query\n   * @param indexName The index name to filter\n   * @param key The entry key.\n   */\n  getByIndex(storeName, indexName, key) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, obs.error));\n        const objectStore = transaction.objectStore(storeName);\n        const index = objectStore.index(indexName);\n        const request = index.get(key);\n        request.onsuccess = event => {\n          obs.next(event.target.result);\n          obs.complete();\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Return all elements from one store\n   * @param storeName The name of the store to select the items\n   */\n  getAll(storeName) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, obs.error, obs.next));\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.getAll();\n        request.onerror = evt => {\n          obs.error(evt);\n        };\n        request.onsuccess = ({\n          target: {\n            result: ResultAll\n          }\n        }) => {\n          obs.next(ResultAll);\n          obs.complete();\n        };\n      }).catch(error => obs.error(error));\n    });\n  }\n  /**\n   * Adds or updates a record in store with the given value and key. Return all items present in the store\n   * @param storeName The name of the store to update\n   * @param value The new value for the entry\n   */\n  update(storeName, value) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, e => obs.error(e)));\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.put(value);\n        request.onsuccess = async evt => {\n          const result = evt.target.result;\n          const getRequest = objectStore.get(result);\n          getRequest.onsuccess = event => {\n            obs.next(event.target.result);\n            obs.complete();\n          };\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Adds or updates a record in store with the given value and key. Return all items present in the store\n   * @param storeName The name of the store to update\n   * @param items The values to update in the DB\n   *\n   * @Return The return value is an Observable with the primary key of the object that was last in given array\n   *\n   * @error If the call to bulkPut fails the transaction will be aborted and previously inserted entities will be deleted\n   */\n  bulkPut(storeName, items) {\n    let transaction;\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, e => obs.error(e)));\n        const objectStore = transaction.objectStore(storeName);\n        items.forEach((item, index) => {\n          const request = objectStore.put(item);\n          if (index === items.length - 1) {\n            request.onsuccess = evt => {\n              transaction.commit();\n              obs.next(evt.target.result);\n              obs.complete();\n            };\n          }\n          request.onerror = evt => {\n            transaction.abort();\n            obs.error(evt);\n          };\n        });\n      }).catch(reason => {\n        transaction?.abort();\n        obs.error(reason);\n      });\n    });\n  }\n  /**\n   * Returns all items from the store after delete.\n   * @param storeName The name of the store to have the entry deleted\n   * @param query The key or key range criteria to apply\n   */\n  delete(storeName, query) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, e => obs.error(e)));\n        const objectStore = transaction.objectStore(storeName);\n        objectStore.delete(query);\n        transaction.onerror = e => obs.error(e);\n        transaction.oncomplete = () => {\n          this.getAll(storeName).pipe(take(1)).subscribe({\n            next: newValues => {\n              obs.next(newValues);\n            },\n            error: e => obs.error(e),\n            complete: () => obs.complete()\n          });\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Returns after a successful delete.\n   * @param storeName The name of the store to have the entry deleted\n   * @param query The key or key range criteria to apply\n   */\n  deleteByKey(storeName, query) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, e => obs.error(e)));\n        const objectStore = transaction.objectStore(storeName);\n        objectStore.delete(query);\n        transaction.onerror = e => obs.error(e);\n        transaction.oncomplete = () => {\n          obs.next();\n          obs.complete();\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Clear the data in the objectStore.\n   * @param storeName The name of the store to have the entries deleted\n   */\n  clear(storeName) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, storeName, e => obs.error(e)));\n        const objectStore = transaction.objectStore(storeName);\n        objectStore.clear();\n        transaction.onerror = e => obs.error(e);\n        transaction.oncomplete = () => {\n          obs.next();\n          obs.complete();\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Delete database.\n   */\n  deleteDatabase() {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(async db => {\n        db.close();\n        const deleteDBRequest = this.indexedDB.deleteDatabase(this.dbConfig.name);\n        deleteDBRequest.onsuccess = () => {\n          obs.next();\n          obs.complete();\n        };\n        deleteDBRequest.onerror = error => obs.error(error);\n        deleteDBRequest.onblocked = () => {\n          console.warn('Delete blocked: Ensure all tabs, instances, or connections are closed. Database name:', this.dbConfig.name);\n          obs.error(new Error(\"Unable to delete database because it's blocked\"));\n        };\n      }).catch(error => obs.error(error));\n    });\n  }\n  /**\n   * Returns the open cursor\n   * If no matching data are present, the observable is completed immediately.\n   * @param options The options to open the cursor\n   * @param options.storeName The name of the store to have the entries deleted\n   * @param options.query The key or key range criteria to apply\n   * @param options.direction A string telling the cursor which direction to travel\n   * @param options.mode The transaction mode.\n   */\n  openCursor(options) {\n    const {\n      storeName,\n      query,\n      direction,\n      mode = DBMode.readonly\n    } = options;\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(mode, storeName, obs.error));\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.openCursor(query, direction);\n        transaction.oncomplete = () => obs.complete();\n        request.onerror = e => obs.error(e);\n        request.onsuccess = event => {\n          const cursor = event.target.result;\n          if (cursor) {\n            obs.next(cursor);\n          }\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Open a cursor by index filter\n   * If no matching data are present, the observable is completed immediately.\n   * @param options The options to open the cursor\n   * @param options.storeName The name of the store to query\n   * @param options.indexName The index name to filter\n   * @param options.query The key or key range criteria to apply\n   * @param options.direction A string telling the cursor which direction to travel\n   * @param options.mode The transaction mode.\n   */\n  openCursorByIndex(options) {\n    const {\n      storeName,\n      indexName,\n      query,\n      direction,\n      mode = DBMode.readonly\n    } = options;\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(mode, storeName, obs.error));\n        const objectStore = transaction.objectStore(storeName);\n        const index = objectStore.index(indexName);\n        const request = index.openCursor(query, direction);\n        transaction.oncomplete = () => obs.complete();\n        request.onerror = e => obs.error(e);\n        request.onsuccess = event => {\n          const cursor = event.target.result;\n          if (cursor) {\n            obs.next(cursor);\n          }\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Returns all items by an index.\n   * @param storeName The name of the store to query\n   * @param indexName The index name to filter\n   * @param query The key or key range criteria to apply\n   * @param direction A string telling the cursor which direction to travel.\n   */\n  getAllByIndex(storeName, indexName, query, direction) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, obs.error));\n        const objectStore = transaction.objectStore(storeName);\n        const index = objectStore.index(indexName);\n        const request = index.openCursor(query, direction);\n        const data = [];\n        request.onerror = e => obs.error(e);\n        request.onsuccess = event => {\n          const cursor = event.target.result;\n          if (cursor) {\n            data.push(cursor.value);\n            cursor.continue();\n          } else {\n            obs.next(data);\n            obs.complete();\n          }\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Returns all primary keys by an index.\n   * @param storeName The name of the store to query\n   * @param query The key or key range criteria to apply\n   * @param direction A string telling the cursor which direction to travel.\n   */\n  getAllKeysByIndex(storeName, indexName, query, direction) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, obs.error));\n        const objectStore = transaction.objectStore(storeName);\n        const index = objectStore.index(indexName);\n        const data = [];\n        const request = index.openKeyCursor(query, direction);\n        request.onerror = e => obs.error(e);\n        request.onsuccess = event => {\n          const cursor = event.target.result;\n          if (cursor) {\n            const {\n              primaryKey,\n              key\n            } = cursor;\n            data.push({\n              primaryKey,\n              key\n            });\n            cursor.continue();\n          } else {\n            obs.next(data);\n            obs.complete();\n          }\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Returns the number of rows in a store.\n   * @param storeName The name of the store to query\n   * @param query The key or key range criteria to apply.\n   */\n  count(storeName, query) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, obs.error));\n        const objectStore = transaction.objectStore(storeName);\n        const request = objectStore.count(query);\n        request.onerror = e => obs.error(e);\n        request.onsuccess = e => {\n          obs.next(e.target.result);\n          obs.complete();\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Returns the number of records within a key range.\n   * @param storeName The name of the store to query\n   * @param indexName The index name to filter\n   * @param query The key or key range criteria to apply.\n   */\n  countByIndex(storeName, indexName, query) {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        validateBeforeTransaction(db, storeName, e => obs.error(e));\n        const transaction = createTransaction(db, optionsGenerator(DBMode.readonly, storeName, obs.error));\n        const objectStore = transaction.objectStore(storeName);\n        const index = objectStore.index(indexName);\n        const request = index.count(query);\n        request.onerror = e => obs.error(e);\n        request.onsuccess = e => {\n          obs.next(e.target.result);\n          obs.complete();\n        };\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  /**\n   * Delete the store by name.\n   * @param storeName The name of the store to query\n   */\n  deleteObjectStore(storeName) {\n    return DeleteObjectStore(this.dbConfig.name, ++this.dbConfig.version, storeName);\n  }\n  /**\n   * Get all object store names.\n   */\n  getAllObjectStoreNames() {\n    return new Observable(obs => {\n      openDatabase(this.indexedDB, this.dbConfig.name, this.dbConfig.version).then(db => {\n        obs.next(Array.from(db.objectStoreNames));\n        obs.complete();\n      }).catch(reason => obs.error(reason));\n    });\n  }\n  static {\n    this.ɵfac = function NgxIndexedDBService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxIndexedDBService)(i0.ɵɵinject(CONFIG_TOKEN), i0.ɵɵinject(INDEXED_DB));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NgxIndexedDBService,\n      factory: NgxIndexedDBService.ɵfac\n    });\n  }\n}\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"getDatabaseVersion\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"add\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"bulkAdd\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"bulkDelete\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"getByKey\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"bulkGet\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"getByID\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"getByIndex\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"getAll\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"update\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"bulkPut\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"delete\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"deleteByKey\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"clear\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"deleteDatabase\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"openCursor\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"openCursorByIndex\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"getAllByIndex\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"getAllKeysByIndex\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"count\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"countByIndex\", null);\n__decorate([CloseDbConnection()], NgxIndexedDBService.prototype, \"getAllObjectStoreNames\", null);\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxIndexedDBService, [{\n    type: Injectable\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CONFIG_TOKEN]\n    }]\n  }, {\n    type: IDBFactory,\n    decorators: [{\n      type: Inject,\n      args: [INDEXED_DB]\n    }]\n  }], {\n    getDatabaseVersion: [],\n    add: [],\n    bulkAdd: [],\n    bulkDelete: [],\n    getByKey: [],\n    bulkGet: [],\n    getByID: [],\n    getByIndex: [],\n    getAll: [],\n    update: [],\n    bulkPut: [],\n    delete: [],\n    deleteByKey: [],\n    clear: [],\n    deleteDatabase: [],\n    openCursor: [],\n    openCursorByIndex: [],\n    getAllByIndex: [],\n    getAllKeysByIndex: [],\n    count: [],\n    countByIndex: [],\n    getAllObjectStoreNames: []\n  });\n})();\n\n/**\n *\n * A class that implements the IDBFactory interface, but only for the server.\n * All methods return a mocked value.\n *\n */\nclass ServerIndexedDB {\n  cmp() {\n    return 0;\n  }\n  databases() {\n    return Promise.resolve([]);\n  }\n  deleteDatabase() {\n    return {\n      onupgradeneeded: null,\n      onblocked: null,\n      onerror: null,\n      onsuccess: null,\n      error: null\n    };\n  }\n  open() {\n    return {\n      onupgradeneeded: null,\n      onblocked: null,\n      onerror: null,\n      onsuccess: null,\n      error: null\n    };\n  }\n}\n\n/**\n * Factory function for creating an instance of IDBFactory.\n *\n * It determines the platform using the {@link PLATFORM_ID} to decide whether to use the\n * browser's IndexedDB or a server-side implementation.\n *\n * @returns {IDBFactory} IDBFactory.\n */\nfunction indexedDbFactory() {\n  assertInInjectionContext(indexedDbFactory);\n  const platformId = inject(PLATFORM_ID);\n  const serverIndexedDB = inject(SERVER_INDEXED_DB, {\n    optional: true\n  }) ?? new ServerIndexedDB();\n  return isPlatformBrowser(platformId) ? inject(DOCUMENT).defaultView.indexedDB : serverIndexedDB;\n}\nconst provideIndexedDb = (...dbConfigs) => {\n  return makeEnvironmentProviders([..._provideIndexedDb(...dbConfigs)]);\n};\nconst _provideIndexedDb = (...dbConfigs) => {\n  const configs = dbConfigs.reduce((acc, curr) => {\n    acc[curr.name] = curr;\n    return acc;\n  }, {});\n  return [NgxIndexedDBService, {\n    provide: CONFIG_TOKEN,\n    useValue: configs\n  }, {\n    provide: INDEXED_DB,\n    useFactory: indexedDbFactory\n  }];\n};\nclass NgxIndexedDBModule {\n  static forRoot(...dbConfigs) {\n    return {\n      ngModule: NgxIndexedDBModule,\n      providers: [..._provideIndexedDb(...dbConfigs)]\n    };\n  }\n  static {\n    this.ɵfac = function NgxIndexedDBModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxIndexedDBModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NgxIndexedDBModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxIndexedDBModule, [{\n    type: NgModule\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CONFIG_TOKEN, DBMode, INDEXED_DB, NgxIndexedDBModule, NgxIndexedDBService, SERVER_INDEXED_DB, provideIndexedDb };\n"],
  "mappings": "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",
  "names": ["DBMode", "indexedDB"]
}
